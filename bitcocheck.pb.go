// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bitcocheck.proto

package bitcocheck

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type TickerItem struct {
	Last                 float32  `protobuf:"fixed32,1,opt,name=Last,json=last,proto3" json:"Last,omitempty"`
	Bid                  float32  `protobuf:"fixed32,2,opt,name=Bid,json=bid,proto3" json:"Bid,omitempty"`
	Ask                  float32  `protobuf:"fixed32,3,opt,name=Ask,json=ask,proto3" json:"Ask,omitempty"`
	High                 float32  `protobuf:"fixed32,4,opt,name=High,json=high,proto3" json:"High,omitempty"`
	Low                  float32  `protobuf:"fixed32,5,opt,name=Low,json=low,proto3" json:"Low,omitempty"`
	Volume               float32  `protobuf:"fixed32,6,opt,name=Volume,json=volume,proto3" json:"Volume,omitempty"`
	Timestamp            uint64   `protobuf:"varint,7,opt,name=Timestamp,json=timestamp,proto3" json:"Timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TickerItem) Reset()         { *m = TickerItem{} }
func (m *TickerItem) String() string { return proto.CompactTextString(m) }
func (*TickerItem) ProtoMessage()    {}
func (*TickerItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{1}
}

func (m *TickerItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TickerItem.Unmarshal(m, b)
}
func (m *TickerItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TickerItem.Marshal(b, m, deterministic)
}
func (m *TickerItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TickerItem.Merge(m, src)
}
func (m *TickerItem) XXX_Size() int {
	return xxx_messageInfo_TickerItem.Size(m)
}
func (m *TickerItem) XXX_DiscardUnknown() {
	xxx_messageInfo_TickerItem.DiscardUnknown(m)
}

var xxx_messageInfo_TickerItem proto.InternalMessageInfo

func (m *TickerItem) GetLast() float32 {
	if m != nil {
		return m.Last
	}
	return 0
}

func (m *TickerItem) GetBid() float32 {
	if m != nil {
		return m.Bid
	}
	return 0
}

func (m *TickerItem) GetAsk() float32 {
	if m != nil {
		return m.Ask
	}
	return 0
}

func (m *TickerItem) GetHigh() float32 {
	if m != nil {
		return m.High
	}
	return 0
}

func (m *TickerItem) GetLow() float32 {
	if m != nil {
		return m.Low
	}
	return 0
}

func (m *TickerItem) GetVolume() float32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *TickerItem) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type TradesParams struct {
	Pair                 string   `protobuf:"bytes,1,opt,name=Pair,json=pair,proto3" json:"Pair,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TradesParams) Reset()         { *m = TradesParams{} }
func (m *TradesParams) String() string { return proto.CompactTextString(m) }
func (*TradesParams) ProtoMessage()    {}
func (*TradesParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{2}
}

func (m *TradesParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradesParams.Unmarshal(m, b)
}
func (m *TradesParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradesParams.Marshal(b, m, deterministic)
}
func (m *TradesParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradesParams.Merge(m, src)
}
func (m *TradesParams) XXX_Size() int {
	return xxx_messageInfo_TradesParams.Size(m)
}
func (m *TradesParams) XXX_DiscardUnknown() {
	xxx_messageInfo_TradesParams.DiscardUnknown(m)
}

var xxx_messageInfo_TradesParams proto.InternalMessageInfo

func (m *TradesParams) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

type Pagenation struct {
	Limit                uint32   `protobuf:"varint,1,opt,name=Limit,json=limit,proto3" json:"Limit,omitempty"`
	Order                string   `protobuf:"bytes,2,opt,name=Order,json=order,proto3" json:"Order,omitempty"`
	StartingAfter        string   `protobuf:"bytes,3,opt,name=StartingAfter,json=startingAfter,proto3" json:"StartingAfter,omitempty"`
	EndingBefore         string   `protobuf:"bytes,4,opt,name=EndingBefore,json=endingBefore,proto3" json:"EndingBefore,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pagenation) Reset()         { *m = Pagenation{} }
func (m *Pagenation) String() string { return proto.CompactTextString(m) }
func (*Pagenation) ProtoMessage()    {}
func (*Pagenation) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{3}
}

func (m *Pagenation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pagenation.Unmarshal(m, b)
}
func (m *Pagenation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pagenation.Marshal(b, m, deterministic)
}
func (m *Pagenation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pagenation.Merge(m, src)
}
func (m *Pagenation) XXX_Size() int {
	return xxx_messageInfo_Pagenation.Size(m)
}
func (m *Pagenation) XXX_DiscardUnknown() {
	xxx_messageInfo_Pagenation.DiscardUnknown(m)
}

var xxx_messageInfo_Pagenation proto.InternalMessageInfo

func (m *Pagenation) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Pagenation) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *Pagenation) GetStartingAfter() string {
	if m != nil {
		return m.StartingAfter
	}
	return ""
}

func (m *Pagenation) GetEndingBefore() string {
	if m != nil {
		return m.EndingBefore
	}
	return ""
}

type TradeData struct {
	ID                   uint32   `protobuf:"varint,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	Amount               string   `protobuf:"bytes,2,opt,name=Amount,json=amount,proto3" json:"Amount,omitempty"`
	Rate                 float32  `protobuf:"fixed32,3,opt,name=Rate,json=rate,proto3" json:"Rate,omitempty"`
	Pair                 string   `protobuf:"bytes,4,opt,name=Pair,json=pair,proto3" json:"Pair,omitempty"`
	OrderType            string   `protobuf:"bytes,5,opt,name=OrderType,json=orderType,proto3" json:"OrderType,omitempty"`
	CreatedAt            string   `protobuf:"bytes,6,opt,name=CreatedAt,json=createdAt,proto3" json:"CreatedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TradeData) Reset()         { *m = TradeData{} }
func (m *TradeData) String() string { return proto.CompactTextString(m) }
func (*TradeData) ProtoMessage()    {}
func (*TradeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{4}
}

func (m *TradeData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradeData.Unmarshal(m, b)
}
func (m *TradeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradeData.Marshal(b, m, deterministic)
}
func (m *TradeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeData.Merge(m, src)
}
func (m *TradeData) XXX_Size() int {
	return xxx_messageInfo_TradeData.Size(m)
}
func (m *TradeData) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeData.DiscardUnknown(m)
}

var xxx_messageInfo_TradeData proto.InternalMessageInfo

func (m *TradeData) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *TradeData) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *TradeData) GetRate() float32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *TradeData) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *TradeData) GetOrderType() string {
	if m != nil {
		return m.OrderType
	}
	return ""
}

func (m *TradeData) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

type TradesItem struct {
	Success              bool         `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Pagination           *Pagenation  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Data                 []*TradeData `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TradesItem) Reset()         { *m = TradesItem{} }
func (m *TradesItem) String() string { return proto.CompactTextString(m) }
func (*TradesItem) ProtoMessage()    {}
func (*TradesItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{5}
}

func (m *TradesItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradesItem.Unmarshal(m, b)
}
func (m *TradesItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradesItem.Marshal(b, m, deterministic)
}
func (m *TradesItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradesItem.Merge(m, src)
}
func (m *TradesItem) XXX_Size() int {
	return xxx_messageInfo_TradesItem.Size(m)
}
func (m *TradesItem) XXX_DiscardUnknown() {
	xxx_messageInfo_TradesItem.DiscardUnknown(m)
}

var xxx_messageInfo_TradesItem proto.InternalMessageInfo

func (m *TradesItem) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *TradesItem) GetPagination() *Pagenation {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *TradesItem) GetData() []*TradeData {
	if m != nil {
		return m.Data
	}
	return nil
}

type OrderArray struct {
	Items                []string `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderArray) Reset()         { *m = OrderArray{} }
func (m *OrderArray) String() string { return proto.CompactTextString(m) }
func (*OrderArray) ProtoMessage()    {}
func (*OrderArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{6}
}

func (m *OrderArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderArray.Unmarshal(m, b)
}
func (m *OrderArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderArray.Marshal(b, m, deterministic)
}
func (m *OrderArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderArray.Merge(m, src)
}
func (m *OrderArray) XXX_Size() int {
	return xxx_messageInfo_OrderArray.Size(m)
}
func (m *OrderArray) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderArray.DiscardUnknown(m)
}

var xxx_messageInfo_OrderArray proto.InternalMessageInfo

func (m *OrderArray) GetItems() []string {
	if m != nil {
		return m.Items
	}
	return nil
}

type OrderBooksItem struct {
	Asks                 []*OrderArray `protobuf:"bytes,1,rep,name=asks,proto3" json:"asks,omitempty"`
	Bids                 []*OrderArray `protobuf:"bytes,2,rep,name=bids,proto3" json:"bids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *OrderBooksItem) Reset()         { *m = OrderBooksItem{} }
func (m *OrderBooksItem) String() string { return proto.CompactTextString(m) }
func (*OrderBooksItem) ProtoMessage()    {}
func (*OrderBooksItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{7}
}

func (m *OrderBooksItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderBooksItem.Unmarshal(m, b)
}
func (m *OrderBooksItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderBooksItem.Marshal(b, m, deterministic)
}
func (m *OrderBooksItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderBooksItem.Merge(m, src)
}
func (m *OrderBooksItem) XXX_Size() int {
	return xxx_messageInfo_OrderBooksItem.Size(m)
}
func (m *OrderBooksItem) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderBooksItem.DiscardUnknown(m)
}

var xxx_messageInfo_OrderBooksItem proto.InternalMessageInfo

func (m *OrderBooksItem) GetAsks() []*OrderArray {
	if m != nil {
		return m.Asks
	}
	return nil
}

func (m *OrderBooksItem) GetBids() []*OrderArray {
	if m != nil {
		return m.Bids
	}
	return nil
}

type ExchangeOrdersRateParam struct {
	OrderType            string   `protobuf:"bytes,1,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	Pair                 string   `protobuf:"bytes,2,opt,name=pair,proto3" json:"pair,omitempty"`
	Amountprice          string   `protobuf:"bytes,3,opt,name=amountprice,proto3" json:"amountprice,omitempty"`
	Value                string   `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExchangeOrdersRateParam) Reset()         { *m = ExchangeOrdersRateParam{} }
func (m *ExchangeOrdersRateParam) String() string { return proto.CompactTextString(m) }
func (*ExchangeOrdersRateParam) ProtoMessage()    {}
func (*ExchangeOrdersRateParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{8}
}

func (m *ExchangeOrdersRateParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExchangeOrdersRateParam.Unmarshal(m, b)
}
func (m *ExchangeOrdersRateParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExchangeOrdersRateParam.Marshal(b, m, deterministic)
}
func (m *ExchangeOrdersRateParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeOrdersRateParam.Merge(m, src)
}
func (m *ExchangeOrdersRateParam) XXX_Size() int {
	return xxx_messageInfo_ExchangeOrdersRateParam.Size(m)
}
func (m *ExchangeOrdersRateParam) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeOrdersRateParam.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeOrdersRateParam proto.InternalMessageInfo

func (m *ExchangeOrdersRateParam) GetOrderType() string {
	if m != nil {
		return m.OrderType
	}
	return ""
}

func (m *ExchangeOrdersRateParam) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *ExchangeOrdersRateParam) GetAmountprice() string {
	if m != nil {
		return m.Amountprice
	}
	return ""
}

func (m *ExchangeOrdersRateParam) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ExchangeOrdersRateItem struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Rate                 string   `protobuf:"bytes,2,opt,name=rate,proto3" json:"rate,omitempty"`
	Price                string   `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	Amount               string   `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExchangeOrdersRateItem) Reset()         { *m = ExchangeOrdersRateItem{} }
func (m *ExchangeOrdersRateItem) String() string { return proto.CompactTextString(m) }
func (*ExchangeOrdersRateItem) ProtoMessage()    {}
func (*ExchangeOrdersRateItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{9}
}

func (m *ExchangeOrdersRateItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExchangeOrdersRateItem.Unmarshal(m, b)
}
func (m *ExchangeOrdersRateItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExchangeOrdersRateItem.Marshal(b, m, deterministic)
}
func (m *ExchangeOrdersRateItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeOrdersRateItem.Merge(m, src)
}
func (m *ExchangeOrdersRateItem) XXX_Size() int {
	return xxx_messageInfo_ExchangeOrdersRateItem.Size(m)
}
func (m *ExchangeOrdersRateItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeOrdersRateItem.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeOrdersRateItem proto.InternalMessageInfo

func (m *ExchangeOrdersRateItem) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ExchangeOrdersRateItem) GetRate() string {
	if m != nil {
		return m.Rate
	}
	return ""
}

func (m *ExchangeOrdersRateItem) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *ExchangeOrdersRateItem) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type RatePairParams struct {
	Pair                 string   `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RatePairParams) Reset()         { *m = RatePairParams{} }
func (m *RatePairParams) String() string { return proto.CompactTextString(m) }
func (*RatePairParams) ProtoMessage()    {}
func (*RatePairParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{10}
}

func (m *RatePairParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RatePairParams.Unmarshal(m, b)
}
func (m *RatePairParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RatePairParams.Marshal(b, m, deterministic)
}
func (m *RatePairParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RatePairParams.Merge(m, src)
}
func (m *RatePairParams) XXX_Size() int {
	return xxx_messageInfo_RatePairParams.Size(m)
}
func (m *RatePairParams) XXX_DiscardUnknown() {
	xxx_messageInfo_RatePairParams.DiscardUnknown(m)
}

var xxx_messageInfo_RatePairParams proto.InternalMessageInfo

func (m *RatePairParams) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

type RatePairItem struct {
	Rate                 string   `protobuf:"bytes,1,opt,name=rate,proto3" json:"rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RatePairItem) Reset()         { *m = RatePairItem{} }
func (m *RatePairItem) String() string { return proto.CompactTextString(m) }
func (*RatePairItem) ProtoMessage()    {}
func (*RatePairItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{11}
}

func (m *RatePairItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RatePairItem.Unmarshal(m, b)
}
func (m *RatePairItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RatePairItem.Marshal(b, m, deterministic)
}
func (m *RatePairItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RatePairItem.Merge(m, src)
}
func (m *RatePairItem) XXX_Size() int {
	return xxx_messageInfo_RatePairItem.Size(m)
}
func (m *RatePairItem) XXX_DiscardUnknown() {
	xxx_messageInfo_RatePairItem.DiscardUnknown(m)
}

var xxx_messageInfo_RatePairItem proto.InternalMessageInfo

func (m *RatePairItem) GetRate() string {
	if m != nil {
		return m.Rate
	}
	return ""
}

type MarketBuyParams struct {
	Pair                 string   `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	MarketBuyAmount      uint32   `protobuf:"varint,2,opt,name=market_buy_amount,json=marketBuyAmount,proto3" json:"market_buy_amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketBuyParams) Reset()         { *m = MarketBuyParams{} }
func (m *MarketBuyParams) String() string { return proto.CompactTextString(m) }
func (*MarketBuyParams) ProtoMessage()    {}
func (*MarketBuyParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{12}
}

func (m *MarketBuyParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketBuyParams.Unmarshal(m, b)
}
func (m *MarketBuyParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketBuyParams.Marshal(b, m, deterministic)
}
func (m *MarketBuyParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketBuyParams.Merge(m, src)
}
func (m *MarketBuyParams) XXX_Size() int {
	return xxx_messageInfo_MarketBuyParams.Size(m)
}
func (m *MarketBuyParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketBuyParams.DiscardUnknown(m)
}

var xxx_messageInfo_MarketBuyParams proto.InternalMessageInfo

func (m *MarketBuyParams) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *MarketBuyParams) GetMarketBuyAmount() uint32 {
	if m != nil {
		return m.MarketBuyAmount
	}
	return 0
}

type MarketSellParam struct {
	Pair                 string   `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	Amount               uint32   `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketSellParam) Reset()         { *m = MarketSellParam{} }
func (m *MarketSellParam) String() string { return proto.CompactTextString(m) }
func (*MarketSellParam) ProtoMessage()    {}
func (*MarketSellParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{13}
}

func (m *MarketSellParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketSellParam.Unmarshal(m, b)
}
func (m *MarketSellParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketSellParam.Marshal(b, m, deterministic)
}
func (m *MarketSellParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketSellParam.Merge(m, src)
}
func (m *MarketSellParam) XXX_Size() int {
	return xxx_messageInfo_MarketSellParam.Size(m)
}
func (m *MarketSellParam) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketSellParam.DiscardUnknown(m)
}

var xxx_messageInfo_MarketSellParam proto.InternalMessageInfo

func (m *MarketSellParam) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *MarketSellParam) GetAmount() uint32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type LimitOrderParams struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Pair                 string   `protobuf:"bytes,2,opt,name=pair,proto3" json:"pair,omitempty"`
	Rate                 string   `protobuf:"bytes,3,opt,name=rate,proto3" json:"rate,omitempty"`
	Amount               string   `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	StopLossRate         string   `protobuf:"bytes,5,opt,name=stop_loss_rate,json=stopLossRate,proto3" json:"stop_loss_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LimitOrderParams) Reset()         { *m = LimitOrderParams{} }
func (m *LimitOrderParams) String() string { return proto.CompactTextString(m) }
func (*LimitOrderParams) ProtoMessage()    {}
func (*LimitOrderParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{14}
}

func (m *LimitOrderParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LimitOrderParams.Unmarshal(m, b)
}
func (m *LimitOrderParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LimitOrderParams.Marshal(b, m, deterministic)
}
func (m *LimitOrderParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitOrderParams.Merge(m, src)
}
func (m *LimitOrderParams) XXX_Size() int {
	return xxx_messageInfo_LimitOrderParams.Size(m)
}
func (m *LimitOrderParams) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitOrderParams.DiscardUnknown(m)
}

var xxx_messageInfo_LimitOrderParams proto.InternalMessageInfo

func (m *LimitOrderParams) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LimitOrderParams) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *LimitOrderParams) GetRate() string {
	if m != nil {
		return m.Rate
	}
	return ""
}

func (m *LimitOrderParams) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *LimitOrderParams) GetStopLossRate() string {
	if m != nil {
		return m.StopLossRate
	}
	return ""
}

type MarketItem struct {
	Success              string   `protobuf:"bytes,1,opt,name=success,proto3" json:"success,omitempty"`
	Id                   uint64   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Rate                 string   `protobuf:"bytes,3,opt,name=rate,proto3" json:"rate,omitempty"`
	Amount               string   `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	OrderType            string   `protobuf:"bytes,5,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	StopLossRate         string   `protobuf:"bytes,6,opt,name=stop_loss_rate,json=stopLossRate,proto3" json:"stop_loss_rate,omitempty"`
	Pair                 string   `protobuf:"bytes,7,opt,name=pair,proto3" json:"pair,omitempty"`
	CreatedAt            string   `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketItem) Reset()         { *m = MarketItem{} }
func (m *MarketItem) String() string { return proto.CompactTextString(m) }
func (*MarketItem) ProtoMessage()    {}
func (*MarketItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{15}
}

func (m *MarketItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketItem.Unmarshal(m, b)
}
func (m *MarketItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketItem.Marshal(b, m, deterministic)
}
func (m *MarketItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketItem.Merge(m, src)
}
func (m *MarketItem) XXX_Size() int {
	return xxx_messageInfo_MarketItem.Size(m)
}
func (m *MarketItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketItem.DiscardUnknown(m)
}

var xxx_messageInfo_MarketItem proto.InternalMessageInfo

func (m *MarketItem) GetSuccess() string {
	if m != nil {
		return m.Success
	}
	return ""
}

func (m *MarketItem) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MarketItem) GetRate() string {
	if m != nil {
		return m.Rate
	}
	return ""
}

func (m *MarketItem) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *MarketItem) GetOrderType() string {
	if m != nil {
		return m.OrderType
	}
	return ""
}

func (m *MarketItem) GetStopLossRate() string {
	if m != nil {
		return m.StopLossRate
	}
	return ""
}

func (m *MarketItem) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *MarketItem) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

type OpenItem struct {
	Id                     uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OrderType              string   `protobuf:"bytes,2,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	Rate                   uint32   `protobuf:"varint,3,opt,name=rate,proto3" json:"rate,omitempty"`
	PendingAmount          string   `protobuf:"bytes,4,opt,name=pending_amount,json=pendingAmount,proto3" json:"pending_amount,omitempty"`
	PendingMarketBuyAmount string   `protobuf:"bytes,5,opt,name=pending_market_buy_amount,json=pendingMarketBuyAmount,proto3" json:"pending_market_buy_amount,omitempty"`
	StopLossRate           string   `protobuf:"bytes,6,opt,name=stop_loss_rate,json=stopLossRate,proto3" json:"stop_loss_rate,omitempty"`
	CreatedAt              string   `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *OpenItem) Reset()         { *m = OpenItem{} }
func (m *OpenItem) String() string { return proto.CompactTextString(m) }
func (*OpenItem) ProtoMessage()    {}
func (*OpenItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{16}
}

func (m *OpenItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenItem.Unmarshal(m, b)
}
func (m *OpenItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenItem.Marshal(b, m, deterministic)
}
func (m *OpenItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenItem.Merge(m, src)
}
func (m *OpenItem) XXX_Size() int {
	return xxx_messageInfo_OpenItem.Size(m)
}
func (m *OpenItem) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenItem.DiscardUnknown(m)
}

var xxx_messageInfo_OpenItem proto.InternalMessageInfo

func (m *OpenItem) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OpenItem) GetOrderType() string {
	if m != nil {
		return m.OrderType
	}
	return ""
}

func (m *OpenItem) GetRate() uint32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *OpenItem) GetPendingAmount() string {
	if m != nil {
		return m.PendingAmount
	}
	return ""
}

func (m *OpenItem) GetPendingMarketBuyAmount() string {
	if m != nil {
		return m.PendingMarketBuyAmount
	}
	return ""
}

func (m *OpenItem) GetStopLossRate() string {
	if m != nil {
		return m.StopLossRate
	}
	return ""
}

func (m *OpenItem) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

type OrdersOpensItem struct {
	Success              bool        `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Orders               []*OpenItem `protobuf:"bytes,2,rep,name=orders,proto3" json:"orders,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *OrdersOpensItem) Reset()         { *m = OrdersOpensItem{} }
func (m *OrdersOpensItem) String() string { return proto.CompactTextString(m) }
func (*OrdersOpensItem) ProtoMessage()    {}
func (*OrdersOpensItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{17}
}

func (m *OrdersOpensItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrdersOpensItem.Unmarshal(m, b)
}
func (m *OrdersOpensItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrdersOpensItem.Marshal(b, m, deterministic)
}
func (m *OrdersOpensItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrdersOpensItem.Merge(m, src)
}
func (m *OrdersOpensItem) XXX_Size() int {
	return xxx_messageInfo_OrdersOpensItem.Size(m)
}
func (m *OrdersOpensItem) XXX_DiscardUnknown() {
	xxx_messageInfo_OrdersOpensItem.DiscardUnknown(m)
}

var xxx_messageInfo_OrdersOpensItem proto.InternalMessageInfo

func (m *OrdersOpensItem) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *OrdersOpensItem) GetOrders() []*OpenItem {
	if m != nil {
		return m.Orders
	}
	return nil
}

type DeleteOrderParam struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteOrderParam) Reset()         { *m = DeleteOrderParam{} }
func (m *DeleteOrderParam) String() string { return proto.CompactTextString(m) }
func (*DeleteOrderParam) ProtoMessage()    {}
func (*DeleteOrderParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{18}
}

func (m *DeleteOrderParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteOrderParam.Unmarshal(m, b)
}
func (m *DeleteOrderParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteOrderParam.Marshal(b, m, deterministic)
}
func (m *DeleteOrderParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteOrderParam.Merge(m, src)
}
func (m *DeleteOrderParam) XXX_Size() int {
	return xxx_messageInfo_DeleteOrderParam.Size(m)
}
func (m *DeleteOrderParam) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteOrderParam.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteOrderParam proto.InternalMessageInfo

func (m *DeleteOrderParam) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteOrderItem struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Id                   uint32   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteOrderItem) Reset()         { *m = DeleteOrderItem{} }
func (m *DeleteOrderItem) String() string { return proto.CompactTextString(m) }
func (*DeleteOrderItem) ProtoMessage()    {}
func (*DeleteOrderItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{19}
}

func (m *DeleteOrderItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteOrderItem.Unmarshal(m, b)
}
func (m *DeleteOrderItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteOrderItem.Marshal(b, m, deterministic)
}
func (m *DeleteOrderItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteOrderItem.Merge(m, src)
}
func (m *DeleteOrderItem) XXX_Size() int {
	return xxx_messageInfo_DeleteOrderItem.Size(m)
}
func (m *DeleteOrderItem) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteOrderItem.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteOrderItem proto.InternalMessageInfo

func (m *DeleteOrderItem) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *DeleteOrderItem) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Funds struct {
	Btc                  string   `protobuf:"bytes,1,opt,name=btc,proto3" json:"btc,omitempty"`
	Jpy                  string   `protobuf:"bytes,2,opt,name=jpy,proto3" json:"jpy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Funds) Reset()         { *m = Funds{} }
func (m *Funds) String() string { return proto.CompactTextString(m) }
func (*Funds) ProtoMessage()    {}
func (*Funds) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{20}
}

func (m *Funds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Funds.Unmarshal(m, b)
}
func (m *Funds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Funds.Marshal(b, m, deterministic)
}
func (m *Funds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Funds.Merge(m, src)
}
func (m *Funds) XXX_Size() int {
	return xxx_messageInfo_Funds.Size(m)
}
func (m *Funds) XXX_DiscardUnknown() {
	xxx_messageInfo_Funds.DiscardUnknown(m)
}

var xxx_messageInfo_Funds proto.InternalMessageInfo

func (m *Funds) GetBtc() string {
	if m != nil {
		return m.Btc
	}
	return ""
}

func (m *Funds) GetJpy() string {
	if m != nil {
		return m.Jpy
	}
	return ""
}

type TransactionsItem struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OrderId              uint32   `protobuf:"varint,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	CreatedAt            string   `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Funds                *Funds   `protobuf:"bytes,4,opt,name=funds,proto3" json:"funds,omitempty"`
	Pair                 string   `protobuf:"bytes,5,opt,name=pair,proto3" json:"pair,omitempty"`
	Rate                 string   `protobuf:"bytes,6,opt,name=rate,proto3" json:"rate,omitempty"`
	FeeCurrency          string   `protobuf:"bytes,7,opt,name=fee_currency,json=feeCurrency,proto3" json:"fee_currency,omitempty"`
	Fee                  string   `protobuf:"bytes,8,opt,name=fee,proto3" json:"fee,omitempty"`
	Liquidity            string   `protobuf:"bytes,9,opt,name=liquidity,proto3" json:"liquidity,omitempty"`
	Side                 string   `protobuf:"bytes,10,opt,name=side,proto3" json:"side,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionsItem) Reset()         { *m = TransactionsItem{} }
func (m *TransactionsItem) String() string { return proto.CompactTextString(m) }
func (*TransactionsItem) ProtoMessage()    {}
func (*TransactionsItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{21}
}

func (m *TransactionsItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionsItem.Unmarshal(m, b)
}
func (m *TransactionsItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionsItem.Marshal(b, m, deterministic)
}
func (m *TransactionsItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionsItem.Merge(m, src)
}
func (m *TransactionsItem) XXX_Size() int {
	return xxx_messageInfo_TransactionsItem.Size(m)
}
func (m *TransactionsItem) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionsItem.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionsItem proto.InternalMessageInfo

func (m *TransactionsItem) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TransactionsItem) GetOrderId() uint32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *TransactionsItem) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *TransactionsItem) GetFunds() *Funds {
	if m != nil {
		return m.Funds
	}
	return nil
}

func (m *TransactionsItem) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *TransactionsItem) GetRate() string {
	if m != nil {
		return m.Rate
	}
	return ""
}

func (m *TransactionsItem) GetFeeCurrency() string {
	if m != nil {
		return m.FeeCurrency
	}
	return ""
}

func (m *TransactionsItem) GetFee() string {
	if m != nil {
		return m.Fee
	}
	return ""
}

func (m *TransactionsItem) GetLiquidity() string {
	if m != nil {
		return m.Liquidity
	}
	return ""
}

func (m *TransactionsItem) GetSide() string {
	if m != nil {
		return m.Side
	}
	return ""
}

type OrdersTransactionsItem struct {
	Success              bool                `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Transactions         []*TransactionsItem `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *OrdersTransactionsItem) Reset()         { *m = OrdersTransactionsItem{} }
func (m *OrdersTransactionsItem) String() string { return proto.CompactTextString(m) }
func (*OrdersTransactionsItem) ProtoMessage()    {}
func (*OrdersTransactionsItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{22}
}

func (m *OrdersTransactionsItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrdersTransactionsItem.Unmarshal(m, b)
}
func (m *OrdersTransactionsItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrdersTransactionsItem.Marshal(b, m, deterministic)
}
func (m *OrdersTransactionsItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrdersTransactionsItem.Merge(m, src)
}
func (m *OrdersTransactionsItem) XXX_Size() int {
	return xxx_messageInfo_OrdersTransactionsItem.Size(m)
}
func (m *OrdersTransactionsItem) XXX_DiscardUnknown() {
	xxx_messageInfo_OrdersTransactionsItem.DiscardUnknown(m)
}

var xxx_messageInfo_OrdersTransactionsItem proto.InternalMessageInfo

func (m *OrdersTransactionsItem) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *OrdersTransactionsItem) GetTransactions() []*TransactionsItem {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type AccountsBalanceItem struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Jpy                  string   `protobuf:"bytes,2,opt,name=jpy,proto3" json:"jpy,omitempty"`
	Btc                  string   `protobuf:"bytes,3,opt,name=btc,proto3" json:"btc,omitempty"`
	JpyReserved          string   `protobuf:"bytes,4,opt,name=jpy_reserved,json=jpyReserved,proto3" json:"jpy_reserved,omitempty"`
	BtcReserved          string   `protobuf:"bytes,5,opt,name=btc_reserved,json=btcReserved,proto3" json:"btc_reserved,omitempty"`
	JpyLendInUse         string   `protobuf:"bytes,6,opt,name=jpy_lend_in_use,json=jpyLendInUse,proto3" json:"jpy_lend_in_use,omitempty"`
	BtcLendInUse         string   `protobuf:"bytes,7,opt,name=btc_lend_in_use,json=btcLendInUse,proto3" json:"btc_lend_in_use,omitempty"`
	JpyLent              string   `protobuf:"bytes,8,opt,name=jpy_lent,json=jpyLent,proto3" json:"jpy_lent,omitempty"`
	BtcLent              string   `protobuf:"bytes,9,opt,name=btc_lent,json=btcLent,proto3" json:"btc_lent,omitempty"`
	JpyDebt              string   `protobuf:"bytes,10,opt,name=jpy_debt,json=jpyDebt,proto3" json:"jpy_debt,omitempty"`
	BtcDebt              string   `protobuf:"bytes,11,opt,name=btc_debt,json=btcDebt,proto3" json:"btc_debt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountsBalanceItem) Reset()         { *m = AccountsBalanceItem{} }
func (m *AccountsBalanceItem) String() string { return proto.CompactTextString(m) }
func (*AccountsBalanceItem) ProtoMessage()    {}
func (*AccountsBalanceItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{23}
}

func (m *AccountsBalanceItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountsBalanceItem.Unmarshal(m, b)
}
func (m *AccountsBalanceItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountsBalanceItem.Marshal(b, m, deterministic)
}
func (m *AccountsBalanceItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountsBalanceItem.Merge(m, src)
}
func (m *AccountsBalanceItem) XXX_Size() int {
	return xxx_messageInfo_AccountsBalanceItem.Size(m)
}
func (m *AccountsBalanceItem) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountsBalanceItem.DiscardUnknown(m)
}

var xxx_messageInfo_AccountsBalanceItem proto.InternalMessageInfo

func (m *AccountsBalanceItem) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AccountsBalanceItem) GetJpy() string {
	if m != nil {
		return m.Jpy
	}
	return ""
}

func (m *AccountsBalanceItem) GetBtc() string {
	if m != nil {
		return m.Btc
	}
	return ""
}

func (m *AccountsBalanceItem) GetJpyReserved() string {
	if m != nil {
		return m.JpyReserved
	}
	return ""
}

func (m *AccountsBalanceItem) GetBtcReserved() string {
	if m != nil {
		return m.BtcReserved
	}
	return ""
}

func (m *AccountsBalanceItem) GetJpyLendInUse() string {
	if m != nil {
		return m.JpyLendInUse
	}
	return ""
}

func (m *AccountsBalanceItem) GetBtcLendInUse() string {
	if m != nil {
		return m.BtcLendInUse
	}
	return ""
}

func (m *AccountsBalanceItem) GetJpyLent() string {
	if m != nil {
		return m.JpyLent
	}
	return ""
}

func (m *AccountsBalanceItem) GetBtcLent() string {
	if m != nil {
		return m.BtcLent
	}
	return ""
}

func (m *AccountsBalanceItem) GetJpyDebt() string {
	if m != nil {
		return m.JpyDebt
	}
	return ""
}

func (m *AccountsBalanceItem) GetBtcDebt() string {
	if m != nil {
		return m.BtcDebt
	}
	return ""
}

type Fees struct {
	TakerFee             string   `protobuf:"bytes,1,opt,name=taker_fee,json=takerFee,proto3" json:"taker_fee,omitempty"`
	MakerFee             string   `protobuf:"bytes,2,opt,name=maker_fee,json=makerFee,proto3" json:"maker_fee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Fees) Reset()         { *m = Fees{} }
func (m *Fees) String() string { return proto.CompactTextString(m) }
func (*Fees) ProtoMessage()    {}
func (*Fees) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{24}
}

func (m *Fees) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Fees.Unmarshal(m, b)
}
func (m *Fees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Fees.Marshal(b, m, deterministic)
}
func (m *Fees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fees.Merge(m, src)
}
func (m *Fees) XXX_Size() int {
	return xxx_messageInfo_Fees.Size(m)
}
func (m *Fees) XXX_DiscardUnknown() {
	xxx_messageInfo_Fees.DiscardUnknown(m)
}

var xxx_messageInfo_Fees proto.InternalMessageInfo

func (m *Fees) GetTakerFee() string {
	if m != nil {
		return m.TakerFee
	}
	return ""
}

func (m *Fees) GetMakerFee() string {
	if m != nil {
		return m.MakerFee
	}
	return ""
}

type ExchangeFees struct {
	BtcJpy               *Fees    `protobuf:"bytes,1,opt,name=btc_jpy,json=btcJpy,proto3" json:"btc_jpy,omitempty"`
	FtcJpy               *Fees    `protobuf:"bytes,2,opt,name=ftc_jpy,json=ftcJpy,proto3" json:"ftc_jpy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExchangeFees) Reset()         { *m = ExchangeFees{} }
func (m *ExchangeFees) String() string { return proto.CompactTextString(m) }
func (*ExchangeFees) ProtoMessage()    {}
func (*ExchangeFees) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{25}
}

func (m *ExchangeFees) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExchangeFees.Unmarshal(m, b)
}
func (m *ExchangeFees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExchangeFees.Marshal(b, m, deterministic)
}
func (m *ExchangeFees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeFees.Merge(m, src)
}
func (m *ExchangeFees) XXX_Size() int {
	return xxx_messageInfo_ExchangeFees.Size(m)
}
func (m *ExchangeFees) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeFees.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeFees proto.InternalMessageInfo

func (m *ExchangeFees) GetBtcJpy() *Fees {
	if m != nil {
		return m.BtcJpy
	}
	return nil
}

func (m *ExchangeFees) GetFtcJpy() *Fees {
	if m != nil {
		return m.FtcJpy
	}
	return nil
}

type AccountsItem struct {
	Success              bool          `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Id                   uint32        `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Email                string        `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	IdentityStatus       string        `protobuf:"bytes,4,opt,name=identity_status,json=identityStatus,proto3" json:"identity_status,omitempty"`
	BitcoinAddress       string        `protobuf:"bytes,5,opt,name=bitcoin_address,json=bitcoinAddress,proto3" json:"bitcoin_address,omitempty"`
	LendingLeverage      uint32        `protobuf:"varint,6,opt,name=lending_leverage,json=lendingLeverage,proto3" json:"lending_leverage,omitempty"`
	TakerFee             string        `protobuf:"bytes,7,opt,name=taker_fee,json=takerFee,proto3" json:"taker_fee,omitempty"`
	MakerFee             string        `protobuf:"bytes,8,opt,name=maker_fee,json=makerFee,proto3" json:"maker_fee,omitempty"`
	ExchangeFees         *ExchangeFees `protobuf:"bytes,9,opt,name=exchange_fees,json=exchangeFees,proto3" json:"exchange_fees,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AccountsItem) Reset()         { *m = AccountsItem{} }
func (m *AccountsItem) String() string { return proto.CompactTextString(m) }
func (*AccountsItem) ProtoMessage()    {}
func (*AccountsItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{26}
}

func (m *AccountsItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountsItem.Unmarshal(m, b)
}
func (m *AccountsItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountsItem.Marshal(b, m, deterministic)
}
func (m *AccountsItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountsItem.Merge(m, src)
}
func (m *AccountsItem) XXX_Size() int {
	return xxx_messageInfo_AccountsItem.Size(m)
}
func (m *AccountsItem) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountsItem.DiscardUnknown(m)
}

var xxx_messageInfo_AccountsItem proto.InternalMessageInfo

func (m *AccountsItem) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AccountsItem) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AccountsItem) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AccountsItem) GetIdentityStatus() string {
	if m != nil {
		return m.IdentityStatus
	}
	return ""
}

func (m *AccountsItem) GetBitcoinAddress() string {
	if m != nil {
		return m.BitcoinAddress
	}
	return ""
}

func (m *AccountsItem) GetLendingLeverage() uint32 {
	if m != nil {
		return m.LendingLeverage
	}
	return 0
}

func (m *AccountsItem) GetTakerFee() string {
	if m != nil {
		return m.TakerFee
	}
	return ""
}

func (m *AccountsItem) GetMakerFee() string {
	if m != nil {
		return m.MakerFee
	}
	return ""
}

func (m *AccountsItem) GetExchangeFees() *ExchangeFees {
	if m != nil {
		return m.ExchangeFees
	}
	return nil
}

type TickerHistParam struct {
	Limit                uint32   `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TickerHistParam) Reset()         { *m = TickerHistParam{} }
func (m *TickerHistParam) String() string { return proto.CompactTextString(m) }
func (*TickerHistParam) ProtoMessage()    {}
func (*TickerHistParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{27}
}

func (m *TickerHistParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TickerHistParam.Unmarshal(m, b)
}
func (m *TickerHistParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TickerHistParam.Marshal(b, m, deterministic)
}
func (m *TickerHistParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TickerHistParam.Merge(m, src)
}
func (m *TickerHistParam) XXX_Size() int {
	return xxx_messageInfo_TickerHistParam.Size(m)
}
func (m *TickerHistParam) XXX_DiscardUnknown() {
	xxx_messageInfo_TickerHistParam.DiscardUnknown(m)
}

var xxx_messageInfo_TickerHistParam proto.InternalMessageInfo

func (m *TickerHistParam) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type TickerHistItem struct {
	Tickeritem           []*TickerItem `protobuf:"bytes,1,rep,name=tickeritem,proto3" json:"tickeritem,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TickerHistItem) Reset()         { *m = TickerHistItem{} }
func (m *TickerHistItem) String() string { return proto.CompactTextString(m) }
func (*TickerHistItem) ProtoMessage()    {}
func (*TickerHistItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_d34031f942b0a586, []int{28}
}

func (m *TickerHistItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TickerHistItem.Unmarshal(m, b)
}
func (m *TickerHistItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TickerHistItem.Marshal(b, m, deterministic)
}
func (m *TickerHistItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TickerHistItem.Merge(m, src)
}
func (m *TickerHistItem) XXX_Size() int {
	return xxx_messageInfo_TickerHistItem.Size(m)
}
func (m *TickerHistItem) XXX_DiscardUnknown() {
	xxx_messageInfo_TickerHistItem.DiscardUnknown(m)
}

var xxx_messageInfo_TickerHistItem proto.InternalMessageInfo

func (m *TickerHistItem) GetTickeritem() []*TickerItem {
	if m != nil {
		return m.Tickeritem
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "bitcocheck.Empty")
	proto.RegisterType((*TickerItem)(nil), "bitcocheck.TickerItem")
	proto.RegisterType((*TradesParams)(nil), "bitcocheck.TradesParams")
	proto.RegisterType((*Pagenation)(nil), "bitcocheck.Pagenation")
	proto.RegisterType((*TradeData)(nil), "bitcocheck.TradeData")
	proto.RegisterType((*TradesItem)(nil), "bitcocheck.TradesItem")
	proto.RegisterType((*OrderArray)(nil), "bitcocheck.OrderArray")
	proto.RegisterType((*OrderBooksItem)(nil), "bitcocheck.OrderBooksItem")
	proto.RegisterType((*ExchangeOrdersRateParam)(nil), "bitcocheck.ExchangeOrdersRateParam")
	proto.RegisterType((*ExchangeOrdersRateItem)(nil), "bitcocheck.ExchangeOrdersRateItem")
	proto.RegisterType((*RatePairParams)(nil), "bitcocheck.RatePairParams")
	proto.RegisterType((*RatePairItem)(nil), "bitcocheck.RatePairItem")
	proto.RegisterType((*MarketBuyParams)(nil), "bitcocheck.MarketBuyParams")
	proto.RegisterType((*MarketSellParam)(nil), "bitcocheck.MarketSellParam")
	proto.RegisterType((*LimitOrderParams)(nil), "bitcocheck.LimitOrderParams")
	proto.RegisterType((*MarketItem)(nil), "bitcocheck.MarketItem")
	proto.RegisterType((*OpenItem)(nil), "bitcocheck.OpenItem")
	proto.RegisterType((*OrdersOpensItem)(nil), "bitcocheck.OrdersOpensItem")
	proto.RegisterType((*DeleteOrderParam)(nil), "bitcocheck.DeleteOrderParam")
	proto.RegisterType((*DeleteOrderItem)(nil), "bitcocheck.DeleteOrderItem")
	proto.RegisterType((*Funds)(nil), "bitcocheck.Funds")
	proto.RegisterType((*TransactionsItem)(nil), "bitcocheck.TransactionsItem")
	proto.RegisterType((*OrdersTransactionsItem)(nil), "bitcocheck.OrdersTransactionsItem")
	proto.RegisterType((*AccountsBalanceItem)(nil), "bitcocheck.AccountsBalanceItem")
	proto.RegisterType((*Fees)(nil), "bitcocheck.Fees")
	proto.RegisterType((*ExchangeFees)(nil), "bitcocheck.ExchangeFees")
	proto.RegisterType((*AccountsItem)(nil), "bitcocheck.AccountsItem")
	proto.RegisterType((*TickerHistParam)(nil), "bitcocheck.TickerHistParam")
	proto.RegisterType((*TickerHistItem)(nil), "bitcocheck.TickerHistItem")
}

func init() {
	proto.RegisterFile("bitcocheck.proto", fileDescriptor_d34031f942b0a586)
}

var fileDescriptor_d34031f942b0a586 = []byte{
	// 1668 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0xdd, 0x6e, 0x23, 0x49,
	0x15, 0x8e, 0xff, 0xdd, 0xc7, 0x7f, 0xd9, 0x9a, 0x10, 0x7a, 0x32, 0xbb, 0x22, 0x5b, 0xcc, 0x32,
	0x33, 0x0b, 0xca, 0x45, 0x10, 0x23, 0xad, 0x60, 0xa4, 0x8d, 0x93, 0x99, 0x9d, 0xa0, 0xac, 0x36,
	0xf4, 0x64, 0x91, 0xb8, 0x6a, 0x95, 0xbb, 0xcb, 0x76, 0xc5, 0xed, 0xee, 0xa6, 0xab, 0x9c, 0xc5,
	0xb7, 0x88, 0x0b, 0xb8, 0x47, 0xe2, 0x96, 0xb7, 0xe0, 0x05, 0x78, 0x03, 0xee, 0x78, 0x0e, 0x1e,
	0x00, 0xd5, 0x4f, 0xff, 0xba, 0x93, 0x2c, 0xdc, 0xb9, 0x4e, 0x7d, 0x75, 0xea, 0x9c, 0xef, 0x3b,
	0x55, 0x7d, 0xca, 0xb0, 0x3f, 0x63, 0xc2, 0x8b, 0xbc, 0x25, 0xf5, 0x56, 0x27, 0x71, 0x12, 0x89,
	0x08, 0x41, 0x6e, 0xc1, 0x3d, 0xe8, 0xbc, 0x5d, 0xc7, 0x62, 0x8b, 0xff, 0xde, 0x00, 0xb8, 0x61,
	0xde, 0x8a, 0x26, 0x97, 0x82, 0xae, 0x11, 0x82, 0xf6, 0x15, 0xe1, 0xc2, 0x6e, 0x1c, 0x37, 0x5e,
	0x36, 0x9d, 0x76, 0x40, 0xb8, 0x40, 0xfb, 0xd0, 0x9a, 0x32, 0xdf, 0x6e, 0x2a, 0x53, 0x6b, 0xc6,
	0x7c, 0x69, 0x39, 0xe3, 0x2b, 0xbb, 0xa5, 0x2d, 0x84, 0xaf, 0xe4, 0xba, 0xf7, 0x6c, 0xb1, 0xb4,
	0xdb, 0x7a, 0xdd, 0x92, 0x2d, 0x96, 0x12, 0x75, 0x15, 0x7d, 0x67, 0x77, 0x34, 0x2a, 0x88, 0xbe,
	0x43, 0x87, 0xd0, 0xfd, 0x6d, 0x14, 0x6c, 0xd6, 0xd4, 0xee, 0x2a, 0x63, 0xf7, 0x4e, 0x8d, 0xd0,
	0xc7, 0x60, 0xdd, 0xb0, 0x35, 0xe5, 0x82, 0xac, 0x63, 0xbb, 0x77, 0xdc, 0x78, 0xd9, 0x76, 0x2c,
	0x91, 0x1a, 0x30, 0x86, 0xe1, 0x4d, 0x42, 0x7c, 0xca, 0xaf, 0x49, 0x42, 0xd6, 0x5c, 0xee, 0x75,
	0x4d, 0x58, 0xa2, 0x62, 0xb4, 0x9c, 0x76, 0x4c, 0x58, 0x82, 0xff, 0xd8, 0x00, 0xb8, 0x26, 0x0b,
	0x1a, 0x12, 0xc1, 0xa2, 0x10, 0x1d, 0x40, 0xe7, 0x8a, 0xad, 0x99, 0xce, 0x63, 0xe4, 0x74, 0x02,
	0x39, 0x90, 0xd6, 0x6f, 0x12, 0x9f, 0x26, 0x2a, 0x15, 0xcb, 0xe9, 0x44, 0x72, 0x80, 0x9e, 0xc3,
	0xe8, 0x83, 0x20, 0x89, 0x60, 0xe1, 0xe2, 0x6c, 0x2e, 0x68, 0xa2, 0xd2, 0xb2, 0x9c, 0x11, 0x2f,
	0x1a, 0x11, 0x86, 0xe1, 0xdb, 0xd0, 0x67, 0xe1, 0x62, 0x4a, 0xe7, 0x51, 0x42, 0x55, 0xa2, 0x96,
	0x33, 0xa4, 0x05, 0x1b, 0xfe, 0x5b, 0x03, 0x2c, 0x15, 0xe9, 0x05, 0x11, 0x04, 0x8d, 0xa1, 0x79,
	0x79, 0x61, 0x02, 0x68, 0xb2, 0x0b, 0x99, 0xfc, 0xd9, 0x3a, 0xda, 0x84, 0xc2, 0x6c, 0xdf, 0x25,
	0x6a, 0x24, 0xd3, 0x71, 0x88, 0xa0, 0x86, 0xcd, 0x76, 0x42, 0x04, 0xcd, 0x52, 0x6c, 0xe7, 0x29,
	0x4a, 0x92, 0x54, 0xf4, 0x37, 0xdb, 0x98, 0x2a, 0x52, 0x2d, 0xc7, 0x8a, 0x52, 0x83, 0x9c, 0x3d,
	0x4f, 0x28, 0x11, 0xd4, 0x3f, 0x13, 0x8a, 0x5d, 0xcb, 0xb1, 0xbc, 0xd4, 0x80, 0xff, 0x22, 0x55,
	0x56, 0x1c, 0x2a, 0x95, 0x6d, 0xe8, 0xf1, 0x8d, 0xe7, 0x51, 0xce, 0x55, 0x7c, 0x7d, 0x27, 0x1d,
	0xa2, 0xd7, 0x00, 0x31, 0x59, 0x30, 0x4d, 0xa3, 0x0a, 0x74, 0x70, 0x7a, 0x78, 0x52, 0x28, 0xa5,
	0x9c, 0x64, 0xa7, 0x80, 0x44, 0xaf, 0xa0, 0xed, 0x13, 0x41, 0xec, 0xd6, 0x71, 0xeb, 0xe5, 0xe0,
	0xf4, 0x07, 0xc5, 0x15, 0x19, 0x23, 0x8e, 0x82, 0x60, 0x0c, 0xa0, 0xf2, 0x38, 0x4b, 0x12, 0xb2,
	0x95, 0x9a, 0x30, 0x41, 0xd7, 0x32, 0x90, 0x96, 0xd4, 0x44, 0x0d, 0xf0, 0x12, 0xc6, 0x0a, 0x33,
	0x8d, 0xa2, 0x95, 0x0e, 0xf9, 0x73, 0x68, 0x13, 0xbe, 0xd2, 0xb0, 0x4a, 0x48, 0xb9, 0x37, 0x47,
	0x61, 0x24, 0x76, 0xc6, 0x7c, 0x6e, 0x37, 0x1f, 0xc6, 0x4a, 0x0c, 0xfe, 0x53, 0x03, 0x7e, 0xf8,
	0xf6, 0x0f, 0xde, 0x92, 0x84, 0x0b, 0xaa, 0x26, 0xb9, 0x14, 0x43, 0x55, 0x1a, 0xfa, 0x04, 0x40,
	0x11, 0xec, 0x0a, 0x49, 0x79, 0xa3, 0x4a, 0x39, 0x02, 0x25, 0x8c, 0x91, 0x53, 0x8b, 0x74, 0x0c,
	0x03, 0x2d, 0x6b, 0x9c, 0x30, 0x8f, 0x9a, 0x52, 0x2a, 0x9a, 0x64, 0xc2, 0x77, 0x24, 0xd8, 0xa4,
	0x15, 0xa4, 0x07, 0x58, 0xc0, 0xe1, 0x6e, 0x14, 0x8f, 0x68, 0x85, 0x40, 0x15, 0x4b, 0xba, 0xbf,
	0x2a, 0x9c, 0x03, 0xe8, 0x14, 0x77, 0xd6, 0x03, 0x59, 0x7a, 0x3a, 0x04, 0xb3, 0xa9, 0x19, 0xe1,
	0xe7, 0x30, 0xd6, 0xd9, 0xb2, 0x24, 0x3f, 0x5b, 0x71, 0xf5, 0x6c, 0x61, 0x18, 0xa6, 0xa8, 0xf4,
	0x8e, 0x50, 0xfb, 0x36, 0xf2, 0x7d, 0xf1, 0x6f, 0x60, 0xf2, 0x35, 0x49, 0x56, 0x54, 0x4c, 0x37,
	0xdb, 0xfb, 0x5d, 0xa1, 0xcf, 0xe1, 0xa3, 0xb5, 0x82, 0xb9, 0xb3, 0xcd, 0xd6, 0x25, 0xf9, 0x71,
	0x18, 0x39, 0x93, 0x75, 0xba, 0x5e, 0x9f, 0x12, 0xfc, 0x26, 0x75, 0xf9, 0x81, 0x06, 0x81, 0x16,
	0xa4, 0xce, 0x65, 0x9e, 0x9b, 0xf6, 0x93, 0xe6, 0xf6, 0xe7, 0x06, 0xec, 0xab, 0x3b, 0x40, 0xf1,
	0x69, 0x62, 0x1a, 0x43, 0x93, 0xf9, 0x6a, 0x79, 0xcb, 0x69, 0x32, 0xbf, 0x56, 0xc2, 0x34, 0xbd,
	0x56, 0x81, 0xd6, 0x7b, 0x08, 0x44, 0xcf, 0x61, 0xcc, 0x45, 0x14, 0xbb, 0x41, 0xc4, 0xb9, 0xab,
	0x56, 0xe9, 0x83, 0x39, 0x94, 0xd6, 0xab, 0x88, 0x2b, 0x19, 0xf1, 0xbf, 0x1b, 0x00, 0x3a, 0x95,
	0x3a, 0x45, 0xad, 0x5c, 0x51, 0x1d, 0x5e, 0x53, 0x5d, 0x80, 0x26, 0xbc, 0xef, 0x1d, 0x4a, 0xb9,
	0x58, 0x77, 0xee, 0x87, 0xdd, 0x48, 0xbb, 0xbb, 0x91, 0x66, 0x7c, 0xf4, 0x0a, 0x7c, 0x7c, 0x02,
	0x60, 0x2e, 0x12, 0x97, 0x08, 0xbb, 0x5f, 0xbd, 0x5a, 0xfe, 0xd3, 0x80, 0xfe, 0x37, 0x31, 0x0d,
	0x55, 0x6a, 0x39, 0xbf, 0x23, 0x95, 0x40, 0x39, 0xa8, 0x66, 0xcd, 0x09, 0xca, 0xf2, 0x1b, 0x99,
	0xfc, 0x3e, 0x83, 0x71, 0xac, 0x6f, 0x55, 0xb7, 0x94, 0xe7, 0xc8, 0x58, 0x75, 0x75, 0xa0, 0x2f,
	0xe0, 0x69, 0x0a, 0xdb, 0xad, 0x28, 0x9d, 0xfd, 0xa1, 0x01, 0x7c, 0x5d, 0x2e, 0xac, 0xef, 0x49,
	0x45, 0x39, 0xed, 0x5e, 0x35, 0xed, 0xdf, 0xc1, 0x44, 0x1f, 0x54, 0x99, 0xfb, 0x63, 0xb7, 0xea,
	0xcf, 0xa0, 0xab, 0x92, 0x4e, 0xaf, 0xa4, 0x83, 0xd2, 0x95, 0x64, 0xc8, 0x73, 0x0c, 0x06, 0x63,
	0xd8, 0xbf, 0xa0, 0x01, 0x15, 0x34, 0xaf, 0xdc, 0x2a, 0xb1, 0xf8, 0x97, 0x30, 0x29, 0x60, 0x1e,
	0xd9, 0x3e, 0x2f, 0x2b, 0xbd, 0xf8, 0xa7, 0xd0, 0x79, 0xb7, 0x09, 0x7d, 0x2e, 0xbf, 0xd0, 0x33,
	0xe1, 0x99, 0x2a, 0x94, 0x3f, 0xa5, 0xe5, 0x36, 0xde, 0x1a, 0xa5, 0xe4, 0x4f, 0xfc, 0xd7, 0x26,
	0xec, 0xdf, 0x24, 0x24, 0xe4, 0xc4, 0x93, 0x37, 0x3d, 0xaf, 0xd5, 0xf9, 0x29, 0xf4, 0xb5, 0xce,
	0xd9, 0x3e, 0x3d, 0x35, 0xbe, 0xf4, 0x2b, 0x3c, 0xb6, 0x2a, 0x3c, 0xa2, 0x17, 0xd0, 0x99, 0xcb,
	0x58, 0x94, 0xca, 0x83, 0xd3, 0x8f, 0x8a, 0xcc, 0xa8, 0x20, 0x1d, 0x3d, 0x9f, 0x95, 0x66, 0xa7,
	0xe6, 0xa8, 0x76, 0x0b, 0xe7, 0xe3, 0x53, 0x18, 0xce, 0x29, 0x75, 0xbd, 0x4d, 0x92, 0xd0, 0xd0,
	0xdb, 0x1a, 0xe5, 0x06, 0x73, 0x4a, 0xcf, 0x8d, 0x49, 0x26, 0x39, 0xa7, 0xd4, 0x94, 0xb2, 0xfc,
	0x29, 0xbf, 0x9e, 0x01, 0xfb, 0xfd, 0x86, 0xf9, 0x4c, 0x6c, 0x6d, 0x4b, 0xc7, 0x98, 0x19, 0xe4,
	0x36, 0x9c, 0xf9, 0xd4, 0x06, 0xbd, 0x8d, 0xfc, 0x2d, 0x2f, 0x6c, 0xad, 0xff, 0x0e, 0x37, 0xf7,
	0xeb, 0xf0, 0x25, 0x0c, 0x45, 0x01, 0x6d, 0x8a, 0xe1, 0xe3, 0xca, 0xc7, 0xb2, 0xe4, 0xcd, 0x29,
	0xad, 0xc0, 0xff, 0x6a, 0xc2, 0x93, 0x33, 0xcf, 0x93, 0x65, 0xcc, 0xa7, 0x24, 0x20, 0xa1, 0xf7,
	0xd8, 0x47, 0x62, 0x47, 0xd0, 0x54, 0xf4, 0x56, 0x2e, 0xfa, 0xa7, 0x30, 0xbc, 0x8d, 0xb7, 0x6e,
	0x42, 0x39, 0x4d, 0xee, 0xa8, 0x6f, 0x0e, 0xdc, 0xe0, 0x36, 0xde, 0x3a, 0xc6, 0x24, 0x21, 0x33,
	0xe1, 0xe5, 0x10, 0xad, 0xc2, 0x60, 0x26, 0xbc, 0x0c, 0xf2, 0x19, 0x4c, 0xa4, 0x97, 0x80, 0x86,
	0xbe, 0xcb, 0x42, 0x77, 0xc3, 0xb3, 0x73, 0x75, 0x1b, 0x6f, 0xaf, 0x68, 0xe8, 0x5f, 0x86, 0xdf,
	0x72, 0x79, 0xbe, 0x27, 0xd2, 0x53, 0x11, 0xa6, 0x25, 0x92, 0x1b, 0xe4, 0xb0, 0xa7, 0xd0, 0x37,
	0xde, 0xd2, 0x3b, 0xa7, 0xa7, 0xdd, 0x08, 0x39, 0x65, 0x3c, 0x08, 0xa3, 0x55, 0x4f, 0x2f, 0x15,
	0xe9, 0x2a, 0x9f, 0xce, 0x84, 0x51, 0x4b, 0xae, 0xba, 0xa0, 0xb3, 0x6c, 0x95, 0x9a, 0x1a, 0x64,
	0xab, 0xe4, 0x14, 0xfe, 0x12, 0xda, 0xef, 0x28, 0xe5, 0xe8, 0x19, 0x58, 0x82, 0xac, 0x68, 0xe2,
	0xca, 0xea, 0xd0, 0x87, 0xa2, 0xaf, 0x0c, 0xef, 0x28, 0x95, 0x93, 0xeb, 0x6c, 0x52, 0xd3, 0xd9,
	0x5f, 0x9b, 0x49, 0xec, 0xc3, 0x30, 0xfd, 0x7c, 0x2b, 0x4f, 0xaf, 0x40, 0x3a, 0x77, 0x25, 0xf3,
	0x0d, 0x55, 0xd7, 0xfb, 0xa5, 0xba, 0xa6, 0x94, 0x3b, 0xdd, 0x99, 0xf0, 0x7e, 0x1d, 0x6f, 0x25,
	0x74, 0x6e, 0xa0, 0xcd, 0xfb, 0xa0, 0x73, 0x05, 0xc5, 0xff, 0x6c, 0xc2, 0x30, 0x55, 0xff, 0x7f,
	0x3b, 0xf2, 0xb2, 0x2f, 0xa0, 0x6b, 0xc2, 0x82, 0xb4, 0x2f, 0x50, 0x03, 0xf4, 0x02, 0x26, 0xcc,
	0xa7, 0xa1, 0x60, 0x62, 0xeb, 0x72, 0x41, 0xc4, 0x86, 0x1b, 0xed, 0xc7, 0xa9, 0xf9, 0x83, 0xb2,
	0x4a, 0xa0, 0x0a, 0x8a, 0x85, 0x2e, 0xf1, 0xfd, 0x44, 0x6e, 0xa8, 0x2b, 0x60, 0x6c, 0xcc, 0x67,
	0xda, 0x8a, 0x5e, 0xc1, 0x7e, 0x60, 0xae, 0xe5, 0x80, 0xde, 0xd1, 0x84, 0x2c, 0x74, 0x15, 0x8c,
	0x9c, 0x89, 0xb1, 0x5f, 0x19, 0x73, 0x99, 0xed, 0xde, 0x43, 0x6c, 0xf7, 0xcb, 0x6c, 0xa3, 0x37,
	0x30, 0xa2, 0x86, 0x6d, 0x39, 0xcf, 0x55, 0x15, 0x0c, 0x4e, 0xed, 0x22, 0x71, 0x45, 0x39, 0x9c,
	0x21, 0x2d, 0x8c, 0xf0, 0x0b, 0x98, 0xe8, 0x17, 0xcf, 0x7b, 0xc6, 0x85, 0xbe, 0x5e, 0x0f, 0x40,
	0x3f, 0x11, 0x4a, 0xef, 0x05, 0xfc, 0x1e, 0xc6, 0x39, 0x50, 0x11, 0xfe, 0x1a, 0x40, 0x28, 0x8b,
	0x6c, 0x53, 0xeb, 0x7a, 0xd1, 0xfc, 0x29, 0xe5, 0x14, 0x90, 0xa7, 0xff, 0xe8, 0x83, 0x75, 0x1e,
	0xb1, 0x50, 0x81, 0xd0, 0x2f, 0xa0, 0xab, 0x71, 0xa8, 0x74, 0xdd, 0xa9, 0x07, 0xd9, 0xd1, 0x3d,
	0xee, 0xf0, 0x1e, 0xfa, 0x2a, 0x7d, 0xa9, 0xc9, 0x70, 0xd0, 0xb3, 0x5d, 0x5c, 0x96, 0xcf, 0xd1,
	0x51, 0xfd, 0xa4, 0x71, 0xf4, 0x2b, 0xe8, 0xea, 0xc7, 0x00, 0xb2, 0x77, 0x1a, 0x75, 0xf3, 0xc8,
	0xaa, 0x84, 0x91, 0x3d, 0x1d, 0xf0, 0x1e, 0x7a, 0x63, 0xfa, 0x77, 0xd5, 0x9b, 0xd7, 0x65, 0x70,
	0xb4, 0xd3, 0x70, 0x67, 0x6d, 0x3c, 0xde, 0x43, 0x2e, 0xa0, 0xdd, 0x4e, 0x17, 0xfd, 0xb8, 0x4e,
	0xbb, 0x4a, 0x3f, 0x7e, 0x84, 0x1f, 0x06, 0x99, 0x0d, 0xa6, 0xd0, 0x4f, 0xdb, 0x55, 0x54, 0x0a,
	0xa5, 0xdc, 0xea, 0x1e, 0xd9, 0x75, 0x73, 0x99, 0x0f, 0x2b, 0xeb, 0x1a, 0xca, 0x4c, 0x57, 0xba,
	0xdc, 0x32, 0x4f, 0x79, 0x93, 0x87, 0xf7, 0xd0, 0x79, 0xda, 0xf4, 0xc9, 0xfe, 0xb5, 0xce, 0x49,
	0xd6, 0xd7, 0x3e, 0xe0, 0x64, 0x0a, 0x7d, 0xd5, 0xc4, 0xca, 0x38, 0x4a, 0x1f, 0x8a, 0x6a, 0x6b,
	0xfb, 0x60, 0x20, 0x96, 0x42, 0xab, 0x38, 0xfe, 0x5f, 0x27, 0x5f, 0xc1, 0x93, 0x32, 0xe3, 0xaa,
	0xef, 0xa9, 0x93, 0xff, 0xd9, 0x8e, 0xfc, 0x79, 0x8f, 0x84, 0xf7, 0x90, 0x03, 0x4f, 0x74, 0xe7,
	0x52, 0x72, 0x57, 0x8e, 0xab, 0xda, 0xfe, 0x94, 0x7d, 0x56, 0x1a, 0x1f, 0xbc, 0x87, 0xbe, 0x85,
	0xa3, 0x72, 0x70, 0xc5, 0xcf, 0x68, 0x5d, 0x8c, 0x78, 0x37, 0xc6, 0xea, 0x97, 0x57, 0xe5, 0x3c,
	0xa9, 0x7c, 0x6c, 0xeb, 0x7c, 0xfd, 0xa8, 0x68, 0xaa, 0xf9, 0x38, 0xe3, 0x3d, 0xf4, 0x05, 0xf4,
	0xd3, 0x89, 0x3a, 0x0f, 0x76, 0x9d, 0x07, 0xbd, 0x74, 0xfa, 0x1a, 0x7e, 0xe2, 0x45, 0xeb, 0x93,
	0x05, 0x13, 0xcb, 0xcd, 0xec, 0x64, 0xb9, 0x8d, 0x23, 0xf9, 0x88, 0x9e, 0x91, 0x70, 0x75, 0x12,
	0x44, 0x1e, 0x09, 0x3c, 0xe2, 0x2d, 0xe9, 0x22, 0x89, 0xbd, 0x69, 0xe1, 0xef, 0x9d, 0xeb, 0xc6,
	0xac, 0xab, 0xfe, 0xf3, 0xf9, 0xf9, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xfa, 0x35, 0x95, 0x0e,
	0x07, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CoincheckClient is the client API for Coincheck service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoincheckClient interface {
	// You can get the latest information easily.
	Ticker(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TickerItem, error)
	TickerHist(ctx context.Context, in *TickerHistParam, opts ...grpc.CallOption) (*TickerHistItem, error)
	// You can get the latest transaction history.
	Trades(ctx context.Context, in *TradesParams, opts ...grpc.CallOption) (*TradesItem, error)
	// Board information can be obtained.
	OrderBooks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OrderBooksItem, error)
	// The rate is calculated based on the exchange's order.
	ExchangeOrdersRate(ctx context.Context, in *ExchangeOrdersRateParam, opts ...grpc.CallOption) (*ExchangeOrdersRateItem, error)
	// Get a dealership rate
	RatePair(ctx context.Context, in *RatePairParams, opts ...grpc.CallOption) (*RatePairItem, error)
	// Market order Cash transaction Buy
	MarketBuy(ctx context.Context, in *MarketBuyParams, opts ...grpc.CallOption) (*MarketItem, error)
	// Market orders, spot trading, selling
	MarketSell(ctx context.Context, in *MarketSellParam, opts ...grpc.CallOption) (*MarketItem, error)
	// Limit order, spot trading, buy.
	LimitBuy(ctx context.Context, in *LimitOrderParams, opts ...grpc.CallOption) (*MarketItem, error)
	// Limit order, spot trading, sell.
	LimitSell(ctx context.Context, in *LimitOrderParams, opts ...grpc.CallOption) (*MarketItem, error)
	// View a list of pending orders in your account.
	ExchangeOrdersOpens(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OrdersOpensItem, error)
	DeleteExchangeOrder(ctx context.Context, in *DeleteOrderParam, opts ...grpc.CallOption) (*DeleteOrderItem, error)
	// You can see your recent transaction history.
	ExchangeOrdersTransactions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OrdersTransactionsItem, error)
	// You can check the balance of your account.
	AccountsBalance(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AccountsBalanceItem, error)
	// View your account information.
	Accounts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AccountsItem, error)
}

type coincheckClient struct {
	cc grpc.ClientConnInterface
}

func NewCoincheckClient(cc grpc.ClientConnInterface) CoincheckClient {
	return &coincheckClient{cc}
}

func (c *coincheckClient) Ticker(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TickerItem, error) {
	out := new(TickerItem)
	err := c.cc.Invoke(ctx, "/bitcocheck.Coincheck/Ticker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coincheckClient) TickerHist(ctx context.Context, in *TickerHistParam, opts ...grpc.CallOption) (*TickerHistItem, error) {
	out := new(TickerHistItem)
	err := c.cc.Invoke(ctx, "/bitcocheck.Coincheck/TickerHist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coincheckClient) Trades(ctx context.Context, in *TradesParams, opts ...grpc.CallOption) (*TradesItem, error) {
	out := new(TradesItem)
	err := c.cc.Invoke(ctx, "/bitcocheck.Coincheck/Trades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coincheckClient) OrderBooks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OrderBooksItem, error) {
	out := new(OrderBooksItem)
	err := c.cc.Invoke(ctx, "/bitcocheck.Coincheck/OrderBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coincheckClient) ExchangeOrdersRate(ctx context.Context, in *ExchangeOrdersRateParam, opts ...grpc.CallOption) (*ExchangeOrdersRateItem, error) {
	out := new(ExchangeOrdersRateItem)
	err := c.cc.Invoke(ctx, "/bitcocheck.Coincheck/ExchangeOrdersRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coincheckClient) RatePair(ctx context.Context, in *RatePairParams, opts ...grpc.CallOption) (*RatePairItem, error) {
	out := new(RatePairItem)
	err := c.cc.Invoke(ctx, "/bitcocheck.Coincheck/RatePair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coincheckClient) MarketBuy(ctx context.Context, in *MarketBuyParams, opts ...grpc.CallOption) (*MarketItem, error) {
	out := new(MarketItem)
	err := c.cc.Invoke(ctx, "/bitcocheck.Coincheck/MarketBuy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coincheckClient) MarketSell(ctx context.Context, in *MarketSellParam, opts ...grpc.CallOption) (*MarketItem, error) {
	out := new(MarketItem)
	err := c.cc.Invoke(ctx, "/bitcocheck.Coincheck/MarketSell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coincheckClient) LimitBuy(ctx context.Context, in *LimitOrderParams, opts ...grpc.CallOption) (*MarketItem, error) {
	out := new(MarketItem)
	err := c.cc.Invoke(ctx, "/bitcocheck.Coincheck/LimitBuy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coincheckClient) LimitSell(ctx context.Context, in *LimitOrderParams, opts ...grpc.CallOption) (*MarketItem, error) {
	out := new(MarketItem)
	err := c.cc.Invoke(ctx, "/bitcocheck.Coincheck/LimitSell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coincheckClient) ExchangeOrdersOpens(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OrdersOpensItem, error) {
	out := new(OrdersOpensItem)
	err := c.cc.Invoke(ctx, "/bitcocheck.Coincheck/ExchangeOrdersOpens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coincheckClient) DeleteExchangeOrder(ctx context.Context, in *DeleteOrderParam, opts ...grpc.CallOption) (*DeleteOrderItem, error) {
	out := new(DeleteOrderItem)
	err := c.cc.Invoke(ctx, "/bitcocheck.Coincheck/DeleteExchangeOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coincheckClient) ExchangeOrdersTransactions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OrdersTransactionsItem, error) {
	out := new(OrdersTransactionsItem)
	err := c.cc.Invoke(ctx, "/bitcocheck.Coincheck/ExchangeOrdersTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coincheckClient) AccountsBalance(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AccountsBalanceItem, error) {
	out := new(AccountsBalanceItem)
	err := c.cc.Invoke(ctx, "/bitcocheck.Coincheck/AccountsBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coincheckClient) Accounts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AccountsItem, error) {
	out := new(AccountsItem)
	err := c.cc.Invoke(ctx, "/bitcocheck.Coincheck/Accounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoincheckServer is the server API for Coincheck service.
type CoincheckServer interface {
	// You can get the latest information easily.
	Ticker(context.Context, *Empty) (*TickerItem, error)
	TickerHist(context.Context, *TickerHistParam) (*TickerHistItem, error)
	// You can get the latest transaction history.
	Trades(context.Context, *TradesParams) (*TradesItem, error)
	// Board information can be obtained.
	OrderBooks(context.Context, *Empty) (*OrderBooksItem, error)
	// The rate is calculated based on the exchange's order.
	ExchangeOrdersRate(context.Context, *ExchangeOrdersRateParam) (*ExchangeOrdersRateItem, error)
	// Get a dealership rate
	RatePair(context.Context, *RatePairParams) (*RatePairItem, error)
	// Market order Cash transaction Buy
	MarketBuy(context.Context, *MarketBuyParams) (*MarketItem, error)
	// Market orders, spot trading, selling
	MarketSell(context.Context, *MarketSellParam) (*MarketItem, error)
	// Limit order, spot trading, buy.
	LimitBuy(context.Context, *LimitOrderParams) (*MarketItem, error)
	// Limit order, spot trading, sell.
	LimitSell(context.Context, *LimitOrderParams) (*MarketItem, error)
	// View a list of pending orders in your account.
	ExchangeOrdersOpens(context.Context, *Empty) (*OrdersOpensItem, error)
	DeleteExchangeOrder(context.Context, *DeleteOrderParam) (*DeleteOrderItem, error)
	// You can see your recent transaction history.
	ExchangeOrdersTransactions(context.Context, *Empty) (*OrdersTransactionsItem, error)
	// You can check the balance of your account.
	AccountsBalance(context.Context, *Empty) (*AccountsBalanceItem, error)
	// View your account information.
	Accounts(context.Context, *Empty) (*AccountsItem, error)
}

// UnimplementedCoincheckServer can be embedded to have forward compatible implementations.
type UnimplementedCoincheckServer struct {
}

func (*UnimplementedCoincheckServer) Ticker(ctx context.Context, req *Empty) (*TickerItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ticker not implemented")
}
func (*UnimplementedCoincheckServer) TickerHist(ctx context.Context, req *TickerHistParam) (*TickerHistItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TickerHist not implemented")
}
func (*UnimplementedCoincheckServer) Trades(ctx context.Context, req *TradesParams) (*TradesItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trades not implemented")
}
func (*UnimplementedCoincheckServer) OrderBooks(ctx context.Context, req *Empty) (*OrderBooksItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderBooks not implemented")
}
func (*UnimplementedCoincheckServer) ExchangeOrdersRate(ctx context.Context, req *ExchangeOrdersRateParam) (*ExchangeOrdersRateItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeOrdersRate not implemented")
}
func (*UnimplementedCoincheckServer) RatePair(ctx context.Context, req *RatePairParams) (*RatePairItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RatePair not implemented")
}
func (*UnimplementedCoincheckServer) MarketBuy(ctx context.Context, req *MarketBuyParams) (*MarketItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketBuy not implemented")
}
func (*UnimplementedCoincheckServer) MarketSell(ctx context.Context, req *MarketSellParam) (*MarketItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketSell not implemented")
}
func (*UnimplementedCoincheckServer) LimitBuy(ctx context.Context, req *LimitOrderParams) (*MarketItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitBuy not implemented")
}
func (*UnimplementedCoincheckServer) LimitSell(ctx context.Context, req *LimitOrderParams) (*MarketItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitSell not implemented")
}
func (*UnimplementedCoincheckServer) ExchangeOrdersOpens(ctx context.Context, req *Empty) (*OrdersOpensItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeOrdersOpens not implemented")
}
func (*UnimplementedCoincheckServer) DeleteExchangeOrder(ctx context.Context, req *DeleteOrderParam) (*DeleteOrderItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExchangeOrder not implemented")
}
func (*UnimplementedCoincheckServer) ExchangeOrdersTransactions(ctx context.Context, req *Empty) (*OrdersTransactionsItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeOrdersTransactions not implemented")
}
func (*UnimplementedCoincheckServer) AccountsBalance(ctx context.Context, req *Empty) (*AccountsBalanceItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountsBalance not implemented")
}
func (*UnimplementedCoincheckServer) Accounts(ctx context.Context, req *Empty) (*AccountsItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accounts not implemented")
}

func RegisterCoincheckServer(s *grpc.Server, srv CoincheckServer) {
	s.RegisterService(&_Coincheck_serviceDesc, srv)
}

func _Coincheck_Ticker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoincheckServer).Ticker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitcocheck.Coincheck/Ticker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoincheckServer).Ticker(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coincheck_TickerHist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TickerHistParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoincheckServer).TickerHist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitcocheck.Coincheck/TickerHist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoincheckServer).TickerHist(ctx, req.(*TickerHistParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coincheck_Trades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoincheckServer).Trades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitcocheck.Coincheck/Trades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoincheckServer).Trades(ctx, req.(*TradesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coincheck_OrderBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoincheckServer).OrderBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitcocheck.Coincheck/OrderBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoincheckServer).OrderBooks(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coincheck_ExchangeOrdersRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeOrdersRateParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoincheckServer).ExchangeOrdersRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitcocheck.Coincheck/ExchangeOrdersRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoincheckServer).ExchangeOrdersRate(ctx, req.(*ExchangeOrdersRateParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coincheck_RatePair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatePairParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoincheckServer).RatePair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitcocheck.Coincheck/RatePair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoincheckServer).RatePair(ctx, req.(*RatePairParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coincheck_MarketBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketBuyParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoincheckServer).MarketBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitcocheck.Coincheck/MarketBuy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoincheckServer).MarketBuy(ctx, req.(*MarketBuyParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coincheck_MarketSell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketSellParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoincheckServer).MarketSell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitcocheck.Coincheck/MarketSell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoincheckServer).MarketSell(ctx, req.(*MarketSellParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coincheck_LimitBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LimitOrderParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoincheckServer).LimitBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitcocheck.Coincheck/LimitBuy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoincheckServer).LimitBuy(ctx, req.(*LimitOrderParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coincheck_LimitSell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LimitOrderParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoincheckServer).LimitSell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitcocheck.Coincheck/LimitSell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoincheckServer).LimitSell(ctx, req.(*LimitOrderParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coincheck_ExchangeOrdersOpens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoincheckServer).ExchangeOrdersOpens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitcocheck.Coincheck/ExchangeOrdersOpens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoincheckServer).ExchangeOrdersOpens(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coincheck_DeleteExchangeOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoincheckServer).DeleteExchangeOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitcocheck.Coincheck/DeleteExchangeOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoincheckServer).DeleteExchangeOrder(ctx, req.(*DeleteOrderParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coincheck_ExchangeOrdersTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoincheckServer).ExchangeOrdersTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitcocheck.Coincheck/ExchangeOrdersTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoincheckServer).ExchangeOrdersTransactions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coincheck_AccountsBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoincheckServer).AccountsBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitcocheck.Coincheck/AccountsBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoincheckServer).AccountsBalance(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coincheck_Accounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoincheckServer).Accounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitcocheck.Coincheck/Accounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoincheckServer).Accounts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Coincheck_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bitcocheck.Coincheck",
	HandlerType: (*CoincheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ticker",
			Handler:    _Coincheck_Ticker_Handler,
		},
		{
			MethodName: "TickerHist",
			Handler:    _Coincheck_TickerHist_Handler,
		},
		{
			MethodName: "Trades",
			Handler:    _Coincheck_Trades_Handler,
		},
		{
			MethodName: "OrderBooks",
			Handler:    _Coincheck_OrderBooks_Handler,
		},
		{
			MethodName: "ExchangeOrdersRate",
			Handler:    _Coincheck_ExchangeOrdersRate_Handler,
		},
		{
			MethodName: "RatePair",
			Handler:    _Coincheck_RatePair_Handler,
		},
		{
			MethodName: "MarketBuy",
			Handler:    _Coincheck_MarketBuy_Handler,
		},
		{
			MethodName: "MarketSell",
			Handler:    _Coincheck_MarketSell_Handler,
		},
		{
			MethodName: "LimitBuy",
			Handler:    _Coincheck_LimitBuy_Handler,
		},
		{
			MethodName: "LimitSell",
			Handler:    _Coincheck_LimitSell_Handler,
		},
		{
			MethodName: "ExchangeOrdersOpens",
			Handler:    _Coincheck_ExchangeOrdersOpens_Handler,
		},
		{
			MethodName: "DeleteExchangeOrder",
			Handler:    _Coincheck_DeleteExchangeOrder_Handler,
		},
		{
			MethodName: "ExchangeOrdersTransactions",
			Handler:    _Coincheck_ExchangeOrdersTransactions_Handler,
		},
		{
			MethodName: "AccountsBalance",
			Handler:    _Coincheck_AccountsBalance_Handler,
		},
		{
			MethodName: "Accounts",
			Handler:    _Coincheck_Accounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bitcocheck.proto",
}
